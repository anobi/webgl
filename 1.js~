//init stuff
var scene = new THREE.Scene();
var renderer = new THREE.WebGLRenderer();
renderer.setClearColor(0x000011);

var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.x = 5;
camera.position.y = 10;
camera.position.z = 5;
camera.lookAt(scene.position);

renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

var shader = new THREE.ShaderMaterial({
    uniforms: THREE.UniformsUtils.merge([
        THREE.UniformsLib['lights'],
        {}
    ]),
    lights: true,
    vertexShader: [
    ].join("\n"),

    fragmentShader: [
    ].join("\n")
});

//create scene
var pointLight = new THREE.PointLight(0xFFBBBB,1,100);
pointLight.position.set(0, 4, 0)
scene.add(pointLight);

var pointLight2 = new THREE.PointLight(0xBBBBFF,1,100);
pointLight2.position.set(4, 0, 0)
scene.add(pointLight2);

var pointLight3 = new THREE.PointLight(0xBBFFBB,1,100);
pointLight3.position.set(0, 0, 4)
scene.add(pointLight3);

shader.needsUpdate = true;

var geometry = new THREE.BoxGeometry(5, 5, 5);
var material = new THREE.MeshBasicMaterial({color: 0x888888});
var cube = new THREE.Mesh(geometry, shader);
cube.position.set(0, 0, 0);
scene.add(cube);


function render() {
	requestAnimationFrame(render);

    var timer = Date.now() * 0.001;

    cube.rotation.x += 0.001;
    cube.rotation.y += 0.001;
    //camera.position.x = Math.cos(timer) * 200;
    //camera.position.z = Math.sin(timer) * 200;
    //camera.lookAt(cube.position);

	renderer.render(scene, camera);
}
render();
